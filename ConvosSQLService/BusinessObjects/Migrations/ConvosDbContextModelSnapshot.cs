// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(ConvosDbContext))]
    partial class ConvosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BusinessObjects.Models.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServerId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("BusinessObjects.Models.ChannelRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ChannelRolePermissions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Emoji", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Emojis");
                });

            modelBuilder.Entity("BusinessObjects.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubcriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubcriptionId");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("BusinessObjects.Models.Friendship", b =>
                {
                    b.Property<Guid>("AddresseeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReminderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AddresseeId", "RequesterId");

                    b.HasIndex("RequesterId", "AddresseeId")
                        .IsUnique();

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("BusinessObjects.Models.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUses")
                        .HasColumnType("int");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Uses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServerId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("BusinessObjects.Models.InviteUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InviteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InviteId");

                    b.HasIndex("ServerMemberId");

                    b.ToTable("InviteUsages");
                });

            modelBuilder.Entity("BusinessObjects.Models.MemberRole", b =>
                {
                    b.Property<Guid>("ServerMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServerMemberId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MemberRoles");
                });

            modelBuilder.Entity("BusinessObjects.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsServer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ace0b9ff-6f48-4bf3-b1ac-cecff006f07b"),
                            Code = "MANAGE_CHANNELS",
                            Description = "Ability to create, delete, or edit channels",
                            IsServer = true,
                            Name = "Manage Channels"
                        },
                        new
                        {
                            Id = new Guid("57a0e147-846a-4f85-88dc-3b5cb7333cb5"),
                            Code = "MANAGE_ROLES",
                            Description = "Ability to create, edit, and assign roles within the server.",
                            IsServer = true,
                            Name = "Manage Roles"
                        },
                        new
                        {
                            Id = new Guid("b0226bcb-dd81-4197-8765-ae3232d2c9f3"),
                            Code = "MANAGE_EMOJIS",
                            Description = "Ability to add or remove emojis available for the server.",
                            IsServer = true,
                            Name = "Manage Emojis"
                        },
                        new
                        {
                            Id = new Guid("e723c049-d571-426a-971f-9e4732f8775d"),
                            Code = "MANAGE_SERVER",
                            Description = "Ability to change server settings (e.g., name, icon, region), view all invites.",
                            IsServer = true,
                            Name = "Manage Server"
                        },
                        new
                        {
                            Id = new Guid("0e4e5531-1819-412e-87cb-24a53a116a06"),
                            Code = "CREATE_INVITE",
                            Description = "Ability to invite new people to server",
                            IsServer = true,
                            Name = "Create Invite"
                        },
                        new
                        {
                            Id = new Guid("79e256b8-6b65-4e54-a590-704472741671"),
                            Code = "CHANGE_NICKNAME",
                            Description = "Ability to change own nickname, a custom name for server",
                            IsServer = true,
                            Name = "Change Nickname"
                        },
                        new
                        {
                            Id = new Guid("b6fb9f52-7d8b-4a19-8076-c7aac466f558"),
                            Code = "MANAGE_NICKNAMES",
                            Description = "Ability to change the nicknames of other members in server",
                            IsServer = true,
                            Name = "Manage Nicknames"
                        },
                        new
                        {
                            Id = new Guid("2fec5fa6-7192-47ea-b665-9bf416900632"),
                            Code = "KICK_MEMBERS",
                            Description = "Ability to kick members from server. Kicked members will be able to rejoin",
                            IsServer = true,
                            Name = "Kick Members"
                        },
                        new
                        {
                            Id = new Guid("898deda3-de67-4cf4-99c8-c7053f1a6708"),
                            Code = "BAN_MEMBERS",
                            Description = "Ability to permanently ban and delete the message history of other members",
                            IsServer = true,
                            Name = "Ban Members"
                        },
                        new
                        {
                            Id = new Guid("8664b0da-d9e3-4c53-b7aa-986c96ef7a4f"),
                            Code = "ATTACH_FILES",
                            Description = "Ability to upload files or media in text channels",
                            IsServer = true,
                            Name = "Attach Files"
                        },
                        new
                        {
                            Id = new Guid("4ac747e7-c32b-480a-9207-80b69159bc8f"),
                            Code = "MANAGE_MESSAGES",
                            Description = "Ability to delete messages by other members or pin any message",
                            IsServer = true,
                            Name = "Manage Messages"
                        },
                        new
                        {
                            Id = new Guid("b488c472-ea49-4002-bf93-62499d255eb2"),
                            Code = "CONNECT",
                            Description = "Ability to join voice channels and hear others",
                            IsServer = true,
                            Name = "Connect"
                        },
                        new
                        {
                            Id = new Guid("6527c883-82ff-4d38-991c-ac955da41e0f"),
                            Code = "MUTE_MEMBERS",
                            Description = "Ability to mute other members in voice channels for everyone",
                            IsServer = true,
                            Name = "Mute Members"
                        },
                        new
                        {
                            Id = new Guid("0d87fbcf-18dc-401b-ac92-4aab1f683337"),
                            Code = "DEAFEN_MEMBERS",
                            Description = "Ability to deafen other members in voice channels",
                            IsServer = true,
                            Name = "Deafen Members"
                        },
                        new
                        {
                            Id = new Guid("32b22a26-b4e2-40f2-8034-48601f2d9af0"),
                            Code = "MANAGE_CATEGORIES",
                            Description = "Ability to create, delete, or edit categories",
                            IsServer = true,
                            Name = "Manage Categories"
                        },
                        new
                        {
                            Id = new Guid("15971620-0e73-4af7-a217-c85d6ec68241"),
                            Code = "VIEW_CHANNEL",
                            Description = "Ability to view the channel. Disable means channel is private",
                            IsServer = false,
                            Name = "View Channel"
                        },
                        new
                        {
                            Id = new Guid("cc3f0186-1f7c-4651-9eea-d7d3d3d5c580"),
                            Code = "MANAGE_CHANNEL",
                            Description = "Ability to change channel is name and delete channel",
                            IsServer = false,
                            Name = "Manage Channel"
                        },
                        new
                        {
                            Id = new Guid("41800693-7502-467b-90d6-434f1d1b89b3"),
                            Code = "MANAGE_PERMISSIONS",
                            Description = "Ability to change channel is permission",
                            IsServer = false,
                            Name = "Manage Permissions"
                        },
                        new
                        {
                            Id = new Guid("ec107acf-58b2-43a6-8e58-e702ef6beba6"),
                            Code = "SEND_MESSAGES_CHANNEL",
                            Description = "Ability to send messages in channel",
                            IsServer = false,
                            Name = "Send Messages"
                        },
                        new
                        {
                            Id = new Guid("e7b057a1-c199-4782-9ba1-88d2aef82074"),
                            Code = "ATTACH_FILES_CHANNEL",
                            Description = "Ability to upload files or media in channel",
                            IsServer = false,
                            Name = "Attach Files"
                        },
                        new
                        {
                            Id = new Guid("2183859d-fdce-4bb2-94b7-7fda18b8938f"),
                            Code = "MENTION_ALL",
                            Description = "Ability to use @everyone or @mention all roles in channel",
                            IsServer = false,
                            Name = "Mention @everyone, and All Roles"
                        },
                        new
                        {
                            Id = new Guid("8f06f903-9cd2-4ec2-bdc0-14c3071bf467"),
                            Code = "MANAGE_MESSAGES_CHANNEL",
                            Description = "Ability to delete messages by other members or pin any message",
                            IsServer = false,
                            Name = "Manage Messages"
                        },
                        new
                        {
                            Id = new Guid("ce56d137-d676-43e4-a3ed-1e92719876f4"),
                            Code = "SEND_VOICE_MESSAGES_CHANNEL",
                            Description = "Ability to send voice messages in channel",
                            IsServer = false,
                            Name = "Send Voice Messages"
                        },
                        new
                        {
                            Id = new Guid("7919c57c-9347-4d7a-bb2a-7a5fbbdd88fc"),
                            Code = "MANAGE_QUIZ",
                            Description = "Ability to manage quizzes settings and participants",
                            IsServer = false,
                            Name = "Manage Quiz"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("BusinessObjects.Models.QuizMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizMember");
                });

            modelBuilder.Entity("BusinessObjects.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Mentionable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BusinessObjects.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("BusinessObjects.Models.ServerMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<bool>("Deafened")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Muted")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("ServerMembers");
                });

            modelBuilder.Entity("BusinessObjects.Models.SoundBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("SoundBoards");
                });

            modelBuilder.Entity("BusinessObjects.Models.Subcription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subcription");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hashtag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pronouns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("Categories")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BusinessObjects.Models.Channel", b =>
                {
                    b.HasOne("BusinessObjects.Models.Category", "Category")
                        .WithMany("Channels")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BusinessObjects.Models.ChannelRolePermission", b =>
                {
                    b.HasOne("BusinessObjects.Models.Channel", "Channel")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("ChannelId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Permission", "Permission")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Models.Emoji", b =>
                {
                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("Emojis")
                        .HasForeignKey("ServerId")
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BusinessObjects.Models.Event", b =>
                {
                    b.HasOne("BusinessObjects.Models.Channel", "Channel")
                        .WithMany("Events")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.ServerMember", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("Events")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Creator");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feature", b =>
                {
                    b.HasOne("BusinessObjects.Models.Subcription", "Subcription")
                        .WithMany("Features")
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subcription");
                });

            modelBuilder.Entity("BusinessObjects.Models.Friendship", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Addressee")
                        .WithMany("ReceivedFriendships")
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "Requester")
                        .WithMany("RequestedFriendships")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("BusinessObjects.Models.Invite", b =>
                {
                    b.HasOne("BusinessObjects.Models.ServerMember", "ServerMember")
                        .WithMany("Invites")
                        .HasForeignKey("CreatorId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("Invites")
                        .HasForeignKey("ServerId")
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("ServerMember");
                });

            modelBuilder.Entity("BusinessObjects.Models.InviteUsage", b =>
                {
                    b.HasOne("BusinessObjects.Models.Invite", "Invite")
                        .WithMany("InviteUsages")
                        .HasForeignKey("InviteId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.ServerMember", "ServerMember")
                        .WithMany("InvitesUsages")
                        .HasForeignKey("ServerMemberId")
                        .IsRequired();

                    b.Navigation("Invite");

                    b.Navigation("ServerMember");
                });

            modelBuilder.Entity("BusinessObjects.Models.MemberRole", b =>
                {
                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("MemberRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.ServerMember", "ServerMember")
                        .WithMany("MemberRoles")
                        .HasForeignKey("ServerMemberId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("ServerMember");
                });

            modelBuilder.Entity("BusinessObjects.Models.Quiz", b =>
                {
                    b.HasOne("BusinessObjects.Models.Channel", "Channel")
                        .WithMany("quizs")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.ServerMember", "Creator")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BusinessObjects.Models.QuizMember", b =>
                {
                    b.HasOne("BusinessObjects.Models.ServerMember", "Participant")
                        .WithMany("ParticipatedQuizzes")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Quiz", "Quiz")
                        .WithMany("Participants")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BusinessObjects.Models.RefreshToken", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BusinessObjects.Models.RolePermission", b =>
                {
                    b.HasOne("BusinessObjects.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Models.ServerMember", b =>
                {
                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("ServerMembers")
                        .HasForeignKey("ServerId")
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("ServerMembers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.SoundBoard", b =>
                {
                    b.HasOne("BusinessObjects.Models.Server", "Server")
                        .WithMany("SoundBoards")
                        .HasForeignKey("ServerId")
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BusinessObjects.Models.Subcription", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Subcriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("BusinessObjects.Models.Channel", b =>
                {
                    b.Navigation("ChannelRolePermissions");

                    b.Navigation("Events");

                    b.Navigation("quizs");
                });

            modelBuilder.Entity("BusinessObjects.Models.Invite", b =>
                {
                    b.Navigation("InviteUsages");
                });

            modelBuilder.Entity("BusinessObjects.Models.Permission", b =>
                {
                    b.Navigation("ChannelRolePermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Quiz", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("ChannelRolePermissions");

                    b.Navigation("MemberRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Server", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Channels");

                    b.Navigation("Emojis");

                    b.Navigation("Events");

                    b.Navigation("Invites");

                    b.Navigation("Roles");

                    b.Navigation("ServerMembers");

                    b.Navigation("SoundBoards");
                });

            modelBuilder.Entity("BusinessObjects.Models.ServerMember", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("Events");

                    b.Navigation("Invites");

                    b.Navigation("InvitesUsages");

                    b.Navigation("MemberRoles");

                    b.Navigation("ParticipatedQuizzes");
                });

            modelBuilder.Entity("BusinessObjects.Models.Subcription", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("ReceivedFriendships");

                    b.Navigation("RequestedFriendships");

                    b.Navigation("ServerMembers");

                    b.Navigation("Subcriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
